image: registry.gitlab.com/gitlab-org/terraform-images/stable:latest

variables:
  TF_ROOT: ${CI_PROJECT_DIR}
  RUNNING_PIPELINE: "run"
  AWS_ACCESS_KEY_ID: "NA" #Defaults to not avaliable
  AWS_SECRET_ACCESS_KEY: "NA" #Defaults to not avaliable
  TF_VAR_FILE : "terraform.tfvars"
## Stop pipelie for the moment via workflow rules
workflow:
  rules:
    - if: $CI_COMMIT_REF_NAME == "Dev" # Deploys variables with _PROD prefix if branch is main
      variables: 
        AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID_EL_DEV
        AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY_EL_DEV
        AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION_EL_DEV
        TF_VAR_FILE : "terraform.tfvars"
    - if: $CI_COMMIT_REF_NAME == "Uat" # Deploys variables with _TEST prefix if branch is testing
      variables:
        AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID_EL_UAT
        AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY_EL_UAT
        AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION_EL_UAT
        TF_VAR_FILE : "terraform_uat.tfvars"
    - when: always #Enables pipeline to still run if not one of the listed branches above   

cache:
  key: besu_deploy
  paths:
    - ${TF_ROOT}/.terraform

before_script:
  - cd ${TF_ROOT}

stages:
  - prepare
  - validate
  - build
  - deploy
  - destroy

init:
  stage: prepare
  script:
    - gitlab-terraform init

validate:
  stage: validate
  script:
    - gitlab-terraform validate

plan:
  stage: build
  script:
    - gitlab-terraform plan -var-file=$TF_VAR_FILE
    - gitlab-terraform plan-json
  artifacts:
    name: plan
    paths:
      - ${TF_ROOT}/plan.cache
    reports:
      terraform: ${TF_ROOT}/plan.json

apply:
  stage: deploy
  environment:
    name: production
  script:
    - gitlab-terraform apply -var-file=$TF_VAR_FILE
  dependencies:
    - plan
  when: manual
  only:
    - main
    - Dev

destroy:
  stage: destroy
  environment:
    name: production
  script:
    - gitlab-terraform destroy
  dependencies:
    - apply
  when: manual
  only:
    - main
    - Dev
